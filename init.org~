

Some Emacs configuration, this file is readed by some code written in
*init.el*. Any configuration here will be using *(use-package)*, if
any package isn't installed, install it.

Install ido mode grid for improving

* General Settings

  Once init.el is initialized, it can still be customized with using
  emacs 'customize', but it will be replaced later for this.

  #+BEGIN_SRC emacs-lisp
    (custom-set-variables
     ;; custom-set-variables was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(column-number-mode t)
     '(company-auto-complete (quote ignore))
     '(company-idle-delay 0)
     '(company-minimum-prefix-length 2)
     '(company-show-numbers (quote (quote left)))
     '(company-tooltip-idle-delay 0.2)
     '(display-battery-mode t)
     '(display-line-numbers-type (quote visual))
     '(display-time-mode t)
     '(global-company-mode t)
     '(global-display-line-numbers-mode t)
     '(ido-enable-flex-matching t)
     '(ido-everywhere t)
     '(ido-mode (quote both) nil (ido))
     '(js-indent-level 2)
     '(menu-bar-mode nil)
     '(package-selected-packages
       (quote
        (all-the-icons dashboard rjsx-mode projectile aggressive-indent exwm xelb use-package rvm ruby-electric gruvbox-theme emmet-mode company-web)))
     '(scroll-bar-mode nil)
     '(show-paren-mode t)
     '(size-indication-mode t)
     '(tool-bar-mode nil)
     '(tooltip-mode nil))
    (custom-set-faces
     ;; custom-set-faces was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(company-echo ((t (:inherit nil :stipple nil))) t)
     '(company-echo-common ((t (:foreground "LemonChiffon"))))
     '(company-preview ((t (:background "dark gray" :foreground "seashell4"))))
     '(company-template-field ((t (:background "light coral" :foreground "LemonChiffon4"))))
     '(company-tooltip ((t (:background "PeachPuff4" :foreground "black"))))
     '(company-tooltip-common ((t (:foreground "lavender"))))
     '(company-tooltip-selection ((t (:background "indian red")))))

    (package-initialize)
    (add-to-list 'package-archives
                 '("melpa-stable" . "https://stable.melpa.org/packages/") t)

    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    ;; USE THIS ONLY ONCE, generates init.el file
    ;; (org-babel-load-file (expand-file-name "~/.emacs.d/init.org"))
  #+END_SRC

* Transparency

  #+BEGIN_SRC emacs-lisp
    (defun toggle-transparency ()
      (interactive)
      (let ((alpha (frame-parameter nil 'alpha)))
        (set-frame-parameter
         nil 'alpha
         (if (eql (cond ((numberp alpha) alpha)
                        ((numberp (cdr alpha)) (cdr alpha))
                        ;; Also handle undocumented (<active> <inactive>) form.
                        ((numberp (cadr alpha)) (cadr alpha)))
                  100)
             '(90 . 90) '(100 . 100)))))
    (global-set-key (kbd "C-c t") 'toggle-transparency)
  #+END_SRC

* Installing packages

  #+BEGIN_SRC emacs-lisp
    (use-package gruvbox-theme
      :ensure t)

    (use-package smart-mode-line
      :ensure t)

    (use-package aggressive-indent
      :ensure t)

    (use-package dashboard
      :ensure t
      :init
      (progn
	(setq dashboard-items '((recents . 5)
				(projects . 3)))
	(setq dashboard-center-content t)
	(setq dashboard-set-file-icons t)
	)
      :config
      (dashboard-setup-startup-hook))


    (use-package all-the-icons
      :ensure t)

    (use-package smartparens
      :ensure t)

    (use-package smex
      :ensure t)

    (use-package system-packages
      :ensure t)

    (use-package system-packages
      :ensure t)

    (use-package bluetooth
      :ensure t)

    (use-package sudo-edit
      :ensure t)

    (use-package flycheck
      :ensure t
      :init (global-flycheck-mode))

    (use-package wallpaper
      :hook ((after-init . wallpaper-cycle-mode))
      :custom ((wallpaper-cycle-single t)
	       (wallpaper-scaling 'scale)
	       (wallpaper-cycle-interval 5)
	       (wallpaper-cycle-directory "~/Pictures/wallpaper")))

    (setq wallpaper-per-workspace-alist '((1 "/Pictures/wallpaper/ezgif-frame-001.jpg")))
    (require 'smex)
    (smartparens-global-mode 1)
    (smex-initialize)
    (global-set-key (kbd "M-x") 'smex)
    (ido-grid-mode 1) ; If installed
    (global-aggressive-indent-mode 1)
    (setq sml/theme 'respectful)
    (sml/setup)
    (require 'desktop-environment)
    (desktop-environment-mode)
    (require 'sudo-edit)
    (global-set-key (kbd "C-c C-r") 'sudo-edit)
					    ; Some org mode configuration
    (setq org-default-notes-file (concat org-directory "/home/minall/notes.org"))
    (define-key global-map "\C-cc" 'org-capture)
    (global-set-key "\C-ca" 'org-agenda)

  #+END_SRC

* Programming

  #+BEGIN_SRC emacs-lisp

    (use-package company
      :ensure t
      :init (global-company-mode))

    (use-package company-web
      :ensure t
      :config
      (add-to-list 'company-backends 'company-web-html)
      (add-to-list 'company-backends 'company-web-jade)
      (add-to-list 'company-backends 'company-web-slim)
      :hook company)

    (use-package projectile
      :ensure t
      :config
      (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
      (projectile-mode +1))
 
  #+END_SRC

** HTML, CSS

   #+BEGIN_SRC emacs-lisp
     (use-package emmet-mode
       :ensure t
       :init
       (setq emmet-indentation 2)
       (setq emmet-move-cursor-between-quotes t)
       :hook ((css-mode) (sgml-mode)))

   #+END_SRC

** Javascript
*** JSX

    #+BEGIN_SRC emacs-lisp
      (use-package rjsx-mode
        :ensure t)

    #+END_SRC
** Ruby

   #+BEGIN_SRC emacs-lisp
     (use-package ruby-electric 
       :ensure t
       :hook (ruby-mode . ruby-electric-mode))

     (use-package ruby-mode
       :ensure t)

     (use-package rvm
       :ensure t)
   #+END_SRC
* Emacs OS

  #+BEGIN_SRC emacs-lisp
    (use-package exwm
      :ensure t)
    (require 'exwm)
    (require 'exwm-config)
    (require 'exwm-systemtray)
    (exwm-config-default)
    (exwm-systemtray-enable)
  #+END_SRC

